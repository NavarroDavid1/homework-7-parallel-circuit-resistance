No award for: Wanted file "ohm.cpp"; Content pattern not found: resistance, extern C; ['extern\\s+"C"\\s*\\{\\s*double\\s*resistance\\([^\\)]*\\)\\s*;']; ohm.cpp should recognize resistance() as an external C function (possible=1)
No award for: Wanted file "ohm.cpp"; Content pattern not found: driver calls on resistance(); ['double\\s+the_resistance\\s*=\\s*resistance\\([^\\)]*\\);']; The driver module should call on the resistance.asm module's resistance() function, and grab the return result to a 64-bit float. Name the variable the_resistance. (possible=1)
Award from 0.0 to 1.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: Use get_resistance; (?s)section\s+\.text.+?extern\s+get_resistance.+?call\s+get_resistance; resistance.asm should utilize the external get_resistance function
Award from 1.0 to 2.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: Use compute_resistance; (?s)section\s+\.text.+?extern\s+compute_resistance.+?call\s+compute_resistance; resistance.asm should utilize the external compute_resistance function
Award from 2.0 to 3.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: Use show_resistance; (?s)section\s+\.text.+?extern\s+show_resistance.+?call\s+show_resistance; resistance.asm should utilize the external show_resistance function
Award from 3.0 to 4.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: Make resistance available; (?m)^\s*global\s+resistance; The resistance module should make its resistance() function visible to other modules
Award from 4.0 to 5.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: resistance() utilizing cpuid; (?s)(?m)section\s+\.text.+?^\s*cpuid; The resistance module should utilize the cpuid instruction
Award from 5.0 to 6.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: resistance() convert int to a float; (?s)(?m)section\s+\.text.+?^\s*cvtsi2sd; The resistance module should be converting integers to floats
Award from 6.0 to 7.0 (adjustment=1; possible=1) for: Wanted file "resistance.asm"; Content pattern found: resistance() grab tick count; (?s)(?m)section\s+\.text.+?^\s*rdtsc; The resistance module should grab the current CPU tick count
No award for: Wanted file "get_resistance.c"; Content pattern not found: fgets and sscanf; ['(?s)fgets.+?sscanf']; The get_sides module should use fgets and sscanf to receive user input (possible=1)
No award for: Wanted file "get_resistance.c"; Content pattern not found: get_resistance signature; ['long\\s+get_resistance\\s*\\(\\s*double\\s*\\*\\s*[a-zA-Z0-9_]+\\s*,\\s*double\\s*\\*\\s*[a-zA-Z0-9_]+\\s*,\\s*double\\s*\\*\\s*[a-zA-Z0-9_]+\\s*,\\s*double\\s*\\*\\s*[a-zA-Z0-9_]+\\s*\\)']; The get_resistance function should have the following signature: long get_resistance(double*, double*, double*, double*); (possible=1)
No award for: Wanted file "compute_resistance.cpp"; Content pattern not found: define and demangle compute_resistance; ['(?s)extern\\s+"C"\\s+{\\s*double\\s*compute_resistance\\s*\\(double[^,]+,\\s*double[^,]+,\\s*double[^,]+,\\s*double']; The compute_resistance module should define and demangle its C++ function compute_resistance, with the following signature: double compute_resistance(double r1, double r2, double r3, double r4, long delay_seconds); (possible=1)
No award for: Wanted file "show_resistance.cpp"; Content pattern not found: Expose and demangle show_resistance; ['(?s)extern\\s+"C"\\s+{\\s*void\\s*show_resistance\\s*\\(double\\s+[^,]+,\\s*long\\s+[^,]+,\\s*double']; The show_resistance module should expose and demangle its show_resistance function with the following signature: void show_resistance(double r, long ticks, double nanoSeconds); (possible=1)
Award from 7.0 to 8.0 (adjustment=1; possible=1) for: Wanted file "show_resistance.cpp"; Content pattern found: show_results float precision (1); std::fixed; Use std::fixed and std::setprecision to ensure your floats print with 10 digits of precision after the decimal point
Award from 8.0 to 9.0 (adjustment=1; possible=1) for: Wanted file "show_resistance.cpp"; Content pattern found: show_results float precision (2); std::setprecision\s*\([^\)]+\); Use std::fixed and std::setprecision to ensure your floats print with 10 digits of precision after the decimal point